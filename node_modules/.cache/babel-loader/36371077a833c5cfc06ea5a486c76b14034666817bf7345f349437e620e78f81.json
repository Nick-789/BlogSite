{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Desktop\\\\blog-app\\\\src\\\\pages\\\\Homepage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport Post from \"../components/Post\";\nimport SearchBar from \"./searchbar\";\nimport stringSimilarity from \"string-similarity\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Homepage() {\n  _s();\n  const [posts, setPosts] = useState([]);\n  const [filteredPosts, setFilteredPosts] = useState([]); // State to hold filtered posts\n\n  useEffect(() => {\n    fetch('http://localhost:4000/upload').then(response => response.json()).then(posts => {\n      setPosts(posts);\n      setFilteredPosts(posts); // Initialize filtered posts with all posts\n    });\n  }, []);\n  const handleSearch = searchKeyword => {\n    if (searchKeyword.trim() === \"\") {\n      setFilteredPosts(posts);\n      return;\n    }\n    const postTitles = posts.map(post => post.title);\n    const options = {\n      includeScore: true\n    };\n    const results = stringSimilarity.findBestMatch(searchKeyword, postTitles, options);\n    const filteredIndices = results.ratings.filter(result => result.score > 0.2) // Adjust the threshold as needed\n    .map(result => result.target);\n    const filtered = filteredIndices.map(index => posts[index]);\n    setFilteredPosts(filtered);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(SearchBar, {\n      onSearch: handleSearch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), filteredPosts.length > 0 && filteredPosts.map(post => /*#__PURE__*/_jsxDEV(Post, {\n      ...post\n    }, post.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 17\n    }, this))]\n  }, void 0, true);\n}\n_s(Homepage, \"q6K2sNFS1sq4esghSX4PZ2EcyPU=\");\n_c = Homepage;\nvar _c;\n$RefreshReg$(_c, \"Homepage\");","map":{"version":3,"names":["React","useEffect","useState","Post","SearchBar","stringSimilarity","jsxDEV","_jsxDEV","Fragment","_Fragment","Homepage","_s","posts","setPosts","filteredPosts","setFilteredPosts","fetch","then","response","json","handleSearch","searchKeyword","trim","postTitles","map","post","title","options","includeScore","results","findBestMatch","filteredIndices","ratings","filter","result","score","target","filtered","index","children","onSearch","fileName","_jsxFileName","lineNumber","columnNumber","length","id","_c","$RefreshReg$"],"sources":["C:/Users/DELL/Desktop/blog-app/src/pages/Homepage.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport Post from \"../components/Post\";\r\nimport SearchBar from \"./searchbar\";\r\nimport stringSimilarity from \"string-similarity\";\r\n\r\nexport default function Homepage() {\r\n    const [posts, setPosts] = useState([]);\r\n    const [filteredPosts, setFilteredPosts] = useState([]); // State to hold filtered posts\r\n\r\n    useEffect(() => {\r\n        fetch('http://localhost:4000/upload')\r\n            .then(response => response.json())\r\n            .then(posts => {\r\n                setPosts(posts);\r\n                setFilteredPosts(posts); // Initialize filtered posts with all posts\r\n            });\r\n    }, []);\r\n\r\n    const handleSearch = (searchKeyword) => {\r\n        if (searchKeyword.trim() === \"\") {\r\n            setFilteredPosts(posts);\r\n            return;\r\n        }\r\n\r\n        const postTitles = posts.map(post => post.title);\r\n        const options = {\r\n            includeScore: true\r\n        };\r\n\r\n        const results = stringSimilarity.findBestMatch(searchKeyword, postTitles, options);\r\n        const filteredIndices = results.ratings\r\n            .filter(result => result.score > 0.2) // Adjust the threshold as needed\r\n            .map(result => result.target);\r\n\r\n        const filtered = filteredIndices.map(index => posts[index]);\r\n        setFilteredPosts(filtered);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <SearchBar onSearch={handleSearch} />\r\n\r\n            {filteredPosts.length > 0 && filteredPosts.map(post => (\r\n                <Post key={post.id} {...post} />\r\n            ))}\r\n        </>\r\n    );\r\n}\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,IAAI,MAAM,oBAAoB;AACrC,OAAOC,SAAS,MAAM,aAAa;AACnC,OAAOC,gBAAgB,MAAM,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEjD,eAAe,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EAC/B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACY,aAAa,EAAEC,gBAAgB,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAExDD,SAAS,CAAC,MAAM;IACZe,KAAK,CAAC,8BAA8B,CAAC,CAChCC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACL,KAAK,IAAI;MACXC,QAAQ,CAACD,KAAK,CAAC;MACfG,gBAAgB,CAACH,KAAK,CAAC,CAAC,CAAC;IAC7B,CAAC,CAAC;EACV,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMQ,YAAY,GAAIC,aAAa,IAAK;IACpC,IAAIA,aAAa,CAACC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;MAC7BP,gBAAgB,CAACH,KAAK,CAAC;MACvB;IACJ;IAEA,MAAMW,UAAU,GAAGX,KAAK,CAACY,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACC,KAAK,CAAC;IAChD,MAAMC,OAAO,GAAG;MACZC,YAAY,EAAE;IAClB,CAAC;IAED,MAAMC,OAAO,GAAGxB,gBAAgB,CAACyB,aAAa,CAACT,aAAa,EAAEE,UAAU,EAAEI,OAAO,CAAC;IAClF,MAAMI,eAAe,GAAGF,OAAO,CAACG,OAAO,CAClCC,MAAM,CAACC,MAAM,IAAIA,MAAM,CAACC,KAAK,GAAG,GAAG,CAAC,CAAC;IAAA,CACrCX,GAAG,CAACU,MAAM,IAAIA,MAAM,CAACE,MAAM,CAAC;IAEjC,MAAMC,QAAQ,GAAGN,eAAe,CAACP,GAAG,CAACc,KAAK,IAAI1B,KAAK,CAAC0B,KAAK,CAAC,CAAC;IAC3DvB,gBAAgB,CAACsB,QAAQ,CAAC;EAC9B,CAAC;EAED,oBACI9B,OAAA,CAAAE,SAAA;IAAA8B,QAAA,gBACIhC,OAAA,CAACH,SAAS;MAACoC,QAAQ,EAAEpB;IAAa;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAEpC9B,aAAa,CAAC+B,MAAM,GAAG,CAAC,IAAI/B,aAAa,CAACU,GAAG,CAACC,IAAI,iBAC/ClB,OAAA,CAACJ,IAAI;MAAA,GAAmBsB;IAAI,GAAjBA,IAAI,CAACqB,EAAE;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAa,CAClC,CAAC;EAAA,eACJ,CAAC;AAEX;AAACjC,EAAA,CA1CuBD,QAAQ;AAAAqC,EAAA,GAARrC,QAAQ;AAAA,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}